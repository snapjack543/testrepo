# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2018-01-03 19:50
from __future__ import unicode_literals

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


def get_descendants(root):
    """
    Returns the a generator of primary keys which represent
    descendants of the given page ID (root_id)
    """
    # Note this is done because get_descendants() can't be trusted
    # as the tree can be corrupt.

    for child in root.children.order_by('path').iterator():
        yield child

        for child in get_descendants(child):
            yield child


def unpublish_never_published_pages(apps, schema_editor):
    """
    Prior to 3.5, pages would be marked as "pending"
    when users tried to publish a page with an unpublished parent.
    This is no longer allowed, as a result any page that's set as
    published but does not have a public version is marked as unpublished.
    """
    Page = apps.get_model('cms', 'Page')
    db_alias = schema_editor.connection.alias
    draft_pages = Page.objects.using(db_alias).filter(publisher_is_draft=True)
    never_published_pages = Page.objects.using(db_alias).filter(
        title_set__published=True,
        publisher_is_draft=True,
        publisher_public__isnull=True,
    )

    for page in never_published_pages.distinct():
        page.title_set.update(
            published=False,
            publisher_state=1,
        )
        draft_pages.filter(pk=page.pk).update(
            publication_date=None,
            publication_end_date=None,
        )

def migrate_to_page_nodes(apps, schema_editor):
    Page = apps.get_model('cms', 'Page')
    TreeNode = apps.get_model('cms', 'TreeNode')
    db_alias = schema_editor.connection.alias

    public_pages = Page.objects.using(db_alias).filter(publisher_is_draft=False)
    root_draft_pages = Page.objects.using(db_alias).filter(
        publisher_is_draft=True,
        parent__isnull=True,
    )

    create_node = TreeNode.objects.using(db_alias).create

    nodes_by_page = {}

    for root in root_draft_pages:
        root.node = create_node(
            site_id=root.site_id,
            path=root.path,
            depth=root.depth,
            numchild=root.numchild,
            parent=None,
        )
        root.save(update_fields=['node'])

        if root.publisher_public_id:
            public_pages.filter(pk=root.publisher_public_id).update(node=root.node)

        nodes_by_page[root.pk] = root.node

        for descendant in get_descendants(root):
            descendant.node = create_node(
                site_id=descendant.site_id,
                path=descendant.path,
                depth=descendant.depth,
                numchild=descendant.numchild,
                parent=nodes_by_page[descendant.parent_id],
            )
            descendant.save(update_fields=['node'])
            nodes_by_page[descendant.pk] = descendant.node

            if descendant.publisher_public_id:
                public_pages.filter(pk=descendant.publisher_public_id).update(node=descendant.node)


class Migration(migrations.Migration):

    dependencies = [
        ('sites', '0001_initial'),
        ('cms', '0017_pagetype'),
    ]

    operations = [
        migrations.RunPython(unpublish_never_published_pages),
        migrations.CreateModel(
            name='TreeNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='cms.TreeNode')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='djangocms_nodes', to='sites.Site', verbose_name='site')),
            ],
            options={
                'ordering': ('path',),
                'default_permissions': [],
            },
        ),
        migrations.AddField(
            model_name='page',
            name='node',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cms_pages',
                                    to='cms.TreeNode'),
        ),
        migrations.AlterUniqueTogether(
            name='page',
            unique_together=set([('node', 'publisher_is_draft')]),
        ),
        migrations.RunPython(migrate_to_page_nodes),
        migrations.AlterModelOptions(
            name='page',
            options={'verbose_name': 'page', 'verbose_name_plural': 'pages', 'permissions': (
            ('view_page', 'Can view page'), ('publish_page', 'Can publish page'),
            ('edit_static_placeholder', 'Can edit static placeholders'))},
        ),
        migrations.AlterField(
            model_name='page',
            name='node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cms_pages',
                                    to='cms.TreeNode'),
        ),
        migrations.RemoveField(
            model_name='page',
            name='site',
        ),
        migrations.RemoveField(
            model_name='page',
            name='parent',
        ),
        migrations.RemoveField(
            model_name='page',
            name='revision_id',
        ),
        migrations.RemoveField(
            model_name='page',
            name='depth',
        ),
        migrations.RemoveField(
            model_name='page',
            name='numchild',
        ),
        migrations.RemoveField(
            model_name='page',
            name='path',
        ),
    ]
